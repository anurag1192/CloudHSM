package com.amazonaws.cloudhsm.examples.key.asymmetric;

import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;

import com.amazonaws.cloudhsm.examples.operations.LoginLogoutExample;
import com.cavium.cfm2.CFM2Exception;
import com.cavium.cfm2.Util;
import com.cavium.key.CaviumECPrivateKey;
import com.cavium.key.CaviumECPublicKey;
import com.cavium.key.CaviumKey;
import com.cavium.key.parameter.CaviumECGenParameterSpec;

public class ECAsymmetricKeyGeneration {

	String[] supportedSpec = {"prime256v1", "secp256r1", "secp384r1"}; 

	public static void main(String[] z) {
		System.out.println("I Rule!");
		LoginLogoutExample.loginWithExplicitCredentials();
		ECAsymmetricKeyGeneration obj = new ECAsymmetricKeyGeneration();
		obj.generateECKeyPair("secp256r1", true);
		obj.generateECKeyPair("secp256r1", "MyECPublicKey" , "MyECPrivateKey" , false ,true);
		LoginLogoutExample.logout();
	}

	public KeyPair generateECKeyPair(String spec, boolean isPersistent) {
		KeyPairGenerator keyPairGen;
		try {
			keyPairGen = KeyPairGenerator.getInstance("EC", "Cavium");
			CaviumECGenParameterSpec paramSpec = new CaviumECGenParameterSpec(spec);
			keyPairGen.initialize(paramSpec);

			KeyPair kp = keyPairGen.generateKeyPair();

			if (kp == null) {
				System.out.println("Failed to generate keypair");
			}
			PrivateKey privKey = kp.getPrivate();
			PublicKey pubKey = kp.getPublic();
			System.out.println("Generated EC Key Pair!");
			if (privKey instanceof CaviumECPrivateKey) {
				CaviumECPrivateKey cavEcPrivateKey = (CaviumECPrivateKey) privKey;
				//Save Private Key Handle. You'll need this to perform encrypt/decrypt operation in future.
				System.out.println("Private Key Handle = " + cavEcPrivateKey.getHandle());
				//Get Private Key Label. This Label is generated by SDK for this key
				System.out.println("Private Key Label = " + cavEcPrivateKey.getLabel());
				//Get Extractable property of this Private key
				System.out.println("Is Private Key Extractalbe = " + cavEcPrivateKey.isExtractable());
				//Get Persistent property of this Private key
				System.out.println("Is Private Key Persistent = " + cavEcPrivateKey.isPersistent());
				//By default Keys are not persistent. Set them Persistent here
				if(isPersistent) {
					System.out.println("Setting Private Key as Persistent:");
					makeKeyPersistant(cavEcPrivateKey);
					System.out.println("Added EC Private Key to HSM");
				}
				System.out.println("Is Private Key Persistent = " + cavEcPrivateKey.isPersistent());
			}

			if(pubKey instanceof CaviumECPublicKey) {
				CaviumECPublicKey cavEcPublicKey = (CaviumECPublicKey) pubKey;
				//Save Public Key Handle. You'll need this to perform encrypt/decrypt operation in future.
				System.out.println("Public Key Handle = " + cavEcPublicKey.getHandle());
				//Get Public Key Label. This Label is generated by SDK for this key
				System.out.println("Public Key Label = " + cavEcPublicKey.getLabel());
				//Get Extractable property of this Public key
				System.out.println("Is Public Key Extractalbe = " +cavEcPublicKey.isExtractable());
				//Get Persistent property of this Public key
				System.out.println("Is Public Key Persistent = " + cavEcPublicKey.isPersistent());
				//By default Keys are not persistent. Set them Persistent here
				if(isPersistent) {
					System.out.println("Setting Public Key as Persistent:");
					makeKeyPersistant(cavEcPublicKey);
					System.out.println("Added EC Public Key to HSM");
				}
				System.out.println("Is Private Key Persistent = " + cavEcPublicKey.isPersistent());
			}
			return kp;
		} catch (NoSuchAlgorithmException | NoSuchProviderException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	//If invoking this function, you can specify public key label, private key label, if private key can be extracted and if key pair is Persistent
	public KeyPair generateECKeyPair(String spec, String publicKeyLabel, String privateKeyLabel, boolean isExtractable, boolean isPersistent) {
		KeyPairGenerator keyPairGen;
		try {
			keyPairGen = KeyPairGenerator.getInstance("EC", "Cavium");
			CaviumECGenParameterSpec paramSpec = new CaviumECGenParameterSpec(spec, publicKeyLabel, privateKeyLabel, isExtractable, isPersistent);
			keyPairGen.initialize(paramSpec);

			KeyPair kp = keyPairGen.generateKeyPair();

			if (kp == null) {
				System.out.println("Failed to generate keypair");
			}
			PrivateKey privKey = kp.getPrivate();
			PublicKey pubKey = kp.getPublic();
			System.out.println("Generated EC Key Pair!");
			if (privKey instanceof CaviumECPrivateKey) {
				CaviumECPrivateKey cavEcPrivateKey = (CaviumECPrivateKey) privKey;
				//Save Private Key Handle. You'll need this to perform encrypt/decrypt operation in future.
				System.out.println("Private Key Handle = " + cavEcPrivateKey.getHandle());
				//Get Private Key Label. 
				System.out.println("Private Key Label = " + cavEcPrivateKey.getLabel());
				//Get Extractable property of this Private key
				System.out.println("Is Private Key Extractalbe = " + cavEcPrivateKey.isExtractable());
				//Get Persistent property of this Private key
				System.out.println("Is Private Key Persistent = " + cavEcPrivateKey.isPersistent());
			}

			if(pubKey instanceof CaviumECPublicKey) {
				CaviumECPublicKey cavEcPublicKey = (CaviumECPublicKey) pubKey;
				//Save Public Key Handle. You'll need this to perform encrypt/decrypt operation in future.
				System.out.println("Public Key Handle = " + cavEcPublicKey.getHandle());
				//Get Public Key Label. 
				System.out.println("Public Key Label = " + cavEcPublicKey.getLabel());
				//Get Extractable property of this Public key
				System.out.println("Is Public Key Extractalbe = " +cavEcPublicKey.isExtractable());
				//Get Persistent property of this Public key
				System.out.println("Is Public Key Persistent = " + cavEcPublicKey.isPersistent());
			}
			return kp;
		} catch (NoSuchAlgorithmException | NoSuchProviderException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	protected void makeKeyPersistant(CaviumKey key) {
		CaviumKey rsaKey = (CaviumKey) key;
		try {
			Util.persistKey(rsaKey);
		} catch (CFM2Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
